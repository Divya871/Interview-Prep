 /*************************************. FIRST WAY ******************************/
 
 TreeNode*rightMost(TreeNode*node,TreeNode*curr)
    {
        while(node->right!=NULL && node->right!=curr)
        {node=node->right;}
        return node;
    }
    
    bool isValidBST(TreeNode *root)
{
    TreeNode *curr = root;
    TreeNode *prev = nullptr;
    bool flag = true;
    while (curr != nullptr)
    {
        TreeNode *left = curr->left;
        if (left == nullptr)
        {

            if (prev != nullptr && prev->val >= curr->val)
            {
                flag = false;
            }
            prev = curr;

            // cout << curr->val << endl;

            curr = curr->right;
        }
        else
        {
            TreeNode *rightMostNode = rightMost(left, curr);
            if (rightMostNode->right == nullptr)
            {                                // thread creation block
                rightMostNode->right = curr; // thread is created

                curr = curr->left;
            }
            else
            {                                   // thread destroy block
                rightMostNode->right = nullptr; // thread is cut down

                if (prev->val >= curr->val)
                {
                    flag = false;
                }
                prev = curr;

                curr = curr->right;
            }
        }
    }
        return flag;
}


/**********************************************.   SECOND WAY. *************************************/

void insertAllLeft(TreeNode *node, list<TreeNode *> &st)
{
    while (node != nullptr)
    {
        st.push_front(node);
        node = node->left;
    }
}

bool isValidBST(TreeNode *root)
{
    list<TreeNode *> st;
    insertAllLeft(root, st);
    long prev = -(long)1e13;
    while (st.size() != 0)
    {
        TreeNode *rnode = st.front();
        st.pop_front();

        if (prev >= rnode->val)
            return false;
        prev = rnode->val;

        insertAllLeft(rnode->right, st);
    }

    return true;
}
