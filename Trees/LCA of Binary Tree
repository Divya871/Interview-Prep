  bool nodeToRootPath(TreeNode*root,TreeNode* data,vector<TreeNode*>&ans)
{
    if(root==NULL){return false;}
    if(root==data){ans.push_back(root);return true;}
    bool res=nodeToRootPath(root->left,data,ans) || nodeToRootPath(root->right,data,ans);
    if(res)
    {ans.push_back(root);}
    return res;
}
  
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        
      vector<TreeNode*>list1;
      vector<TreeNode*>list2;
      
      nodeToRootPath(root,p,list1);
      nodeToRootPath(root,q,list2);
      
      int i=list1.size()-1;
      int j=list2.size()-1;
      TreeNode*LCA=NULL;
      
      while(i>=0 && j>=0)
      {
        if(list1[i]!=list2[j]){break;}
        LCA=list1[i];
        i--;j--;
      }
      return LCA;
     }
