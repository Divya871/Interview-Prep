void burningTreeNodeWithWater(TreeNode root, int time, TreeNode blockNode, HashSet<Integer> waterSet,
            ArrayList<ArrayList<Integer>> ans) {
        if (root == null || root == blockNode || waterSet.contains(root.val))
            return;
        if (time == ans.size()) // if(time == ans.size()) ans.push_back({});
            ans.add(new ArrayList<>());
        ans.get(time).add(root.val);

        burningTreeNodeWithWater(root.left, time + 1, blockNode, waterSet, ans);
        burningTreeNodeWithWater(root.right, time + 1, blockNode, waterSet, ans);

    }

    public static int burningTreeWithWater(TreeNode root, int fireNode, HashSet<Integer> waterSet,
            ArrayList<ArrayList<Integer>> ans) {
        if (root == null)
            return -1;
        if (root.val == fireNode) {
            if (!waterSet.contains(root.val)) { // foor cpp : map.find(root->val) != map.end();
                burningTreeNodeWithWater(root, 0, null, waterSet, ans);
                return 1;
            }
            return -2; // fire node is present but it have water.
        }

        int lt = burningTreeWithWater(root.left, fireNode, waterSet, ans);
        if (lt > 0) {
            if (!waterSet.contains(root.val)) {
                burningTreeNodeWithWater(root, lt, root.left, waterSet, ans);
                return lt + 1;
            }
            return -2; // fire node is present but it have water.
        }

        if (lt == -2)
            return -2;

        int rt = burningTreeWithWater(root.right, fireNode, waterSet, ans);
        if (rt > 0) {
            if (!waterSet.contains(root.val)) {
                burningTreeNodeWithWater(root, rt, root.right, waterSet, ans);
                return rt + 1;
            }
            return -2; // fire node is present but it have water.
        }
        if (rt == -2)
            return -2;

        return -1;
    }

    public static void burningTreeWithWater(TreeNode root, int data) {
        HashSet<Integer> waterSet = new HashSet<>(); // unordered_set<int> map;
        ArrayList<ArrayList<Integer>> ans = new ArrayList<>();

        burningTreeWithWater(root, data, waterSet, ans);
        System.out.println(ans);
    }
