class vpair
{
public:
    TreeNode *node = NULL;
    int vl = 0;

    vpair(TreeNode *node, int vl)
    {
        this->node = node;
        this->vl = vl;
    }
};

// {min,max}
void widthOfShadow(TreeNode *root, int vl, vector<int> &minMax)
{
    if (root == NULL)
        return;

    minMax[0] = min(minMax[0], vl);
    minMax[1] = max(minMax[1], vl);

    widthOfShadow(root->left, vl - 1, minMax);
    widthOfShadow(root->right, vl + 1, minMax);
}
vector<int> BottomView(TreeNode *root)
{
     if (root == NULL)
        return {};

    vector<int> minMax(2, 0);
    widthOfShadow(root, 0, minMax);
    int width = minMax[1] - minMax[0] + 1;
    vector<int> ans(width);

    list<vpair> que;
    que.push_back(vpair(root, abs(minMax[0])));

    while (que.size() != 0)
    {
        int size = que.size();
        while (size-- > 0)
        {
            vpair p = que.front();
            que.pop_front();
            TreeNode *node = p.node;
            int vl = p.vl;

            ans[vl] = node->val;

            if (node->left != NULL)
                que.push_back(vpair(node->left, vl - 1));
            if (node->right != NULL)
                que.push_back(vpair(node->right, vl + 1));
        }
    }

    return ans;
}
