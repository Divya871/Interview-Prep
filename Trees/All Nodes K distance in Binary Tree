  bool nodeToRootPath(TreeNode* node, TreeNode* target, vector<TreeNode*>&ans)
    {
        if(node==nullptr){return false;}
        if(node==target){ans.push_back(node);return true;}
        bool res=nodeToRootPath(node->left,target,ans) ||nodeToRootPath(node->right,target,ans);
        if(res){ans.push_back(node);}
        return res;
    }
    
    void printKdown(TreeNode*node,TreeNode*blockNode,int k,vector<int>&temp)
    {
        if(node==NULL || node==blockNode || k<0 ){return;}
        if(k==0){temp.push_back(node->val);return;}
        printKdown(node->left,blockNode,k-1,temp);
        printKdown(node->right,blockNode,k-1,temp);
    }
    
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        vector<TreeNode*>ans;
        nodeToRootPath(root,target,ans);
        TreeNode*blockNode=nullptr;
        vector<int>temp;
        for(int i=0;i<ans.size();i++)
        {
            printKdown(ans[i],blockNode,k-i,temp);
            blockNode=ans[i];
        }
        return temp;
    }
    
    
    
    
    /*************************Second Way************************/
    
     void printKDown(TreeNode* node, TreeNode* block, int depth, vector<int> &ans) {
        if (node == NULL || depth < 0 || node == block)
            return;

        if (depth == 0) {
            ans.push_back(node->val);
            return;
        }

        printKDown(node->left, block, depth - 1, ans);
        printKDown(node->right, block, depth - 1, ans);
    }
    
    
 
  int distanceK2(TreeNode* node, TreeNode* target, int K, vector<int>& ans) {
        if (node == nullptr)
            return -1;

        if (node == target) {
            printKDown(node, nullptr, K, ans);
            return 1;
        }

        int lans = distanceK2(node->left, target, K, ans);
        if (lans != -1) {
            printKDown(node, node->left, K - lans, ans);
            return lans + 1;
        }

        int rans = distanceK2(node->right, target, K, ans);
        if (rans != -1) {
            printKDown(node, node->right, K - rans, ans);
            return rans + 1;
        }

        return -1;
    }

    vector<int> distanceK(TreeNode *root, TreeNode* target, int K) {
vector<int>ans;
        distanceK2(root, target, K, ans);
        return ans;
    }
    
    
    
    
