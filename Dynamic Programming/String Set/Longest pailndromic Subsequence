****************** MEMO CODE *********************

int lps(int i,int j,string&s,vector<vector<int>>&dp)
    {   if(i>=j){return dp[i][j]=(i==j)?1:0;}
     
        if(dp[i][j]!=-1){return dp[i][j];}
     
        if(s[i]==s[j])
        {
            dp[i][j]=lps(i+1,j-1,s,dp)+2;
        }
        else
        {
            dp[i][j]=max(lps(i+1,j,s,dp),lps(i,j-1,s,dp));
        }
         return dp[i][j];
    }
    
    int longestPalindromeSubseq(string s) {
        int n=s.length();
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        return lps(0,s.length()-1,s,dp);
    }
    
    
    
  ************** TABU CODE ************************
  
   int lps(int I,int J,string&s,vector<vector<int>>&dp)
    {   int n=s.length();
        for(int gap=0;gap<n;gap++)
        {
            for(int i=0,j=gap;j<n;i++,j++)
            {
            
        if(i>=j){dp[i][j]=(i==j)?1:0;continue;}
     
        if(s[i]==s[j])
        {
            dp[i][j]=dp[i+1][j-1]+2;
        }
        else
        {
            dp[i][j]=max(dp[i][j-1],dp[i+1][j]);
        }
            }
        }
         return dp[I][J];
    }
    
    int longestPalindromeSubseq(string s) {
        int n=s.length();
        vector<vector<int>>dp(n+1,vector<int>(n+1));
        return lps(0,s.length()-1,s,dp);
    }
