 int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=n;
        vector<vector<int>>dir{{1,0},{0,1},{0,-1},{-1,0},{1,1},{-1,1},{1,-1},{-1,-1}};
      
      if(n==0 || m==0){return 0;}
      if(grid[0][0]==1 || grid[n-1][n-1]==1){return -1;}
      
      queue<int>q;
      
      grid[0][0]=1;
      q.push(0*m+0);
      int level=1;
      
      while(!q.empty())
      {
        int size=q.size();
        while(size--)
        {
          int idx=q.front();q.pop();
          int r=idx/m;
          int c=idx%m;
          
          if(r==n-1 && c==m-1){return level;}
          
          for(int d=0;d<dir.size();d++)
          {
            int x=r+dir[d][0];
            int y=c+dir[d][1];
            
            if(x>=0 && y>=0 && x<n && y<m && grid[x][y]==0)
            {
             grid[x][y]=1;
             q.push(x*m+y);
          }
          }
        }
        level++;
      }
      return -1;
   }
